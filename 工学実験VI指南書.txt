工学実験VI指南書
1．作業について
自分の行った作業（コマンド，ファイルの編集，プログラミング，気付いたこと，できなかったこと等）はすべてドキュメントとして残す（.txtか.docxか.odt）．
必要だと感じた場合，ドキュメントをLINE「Documents」へアップロードする．
また，必ず，実験前日の日曜日の夜までに週報，あるいはドキュメントを「Documents」へアップロードする．
不明な点があり，自分で解決できない場合は，すぐに相談して対処する．そのまま放置してはいけない．

2．スケジュールについて
スケジュールに遅れがある場合は，相談して，すぐに対処する．
今週のタスクが済んだ場合，来週のタスクにも取り組んでよい．
グループ全員で共通の知識を有したいと考えている．「達成目標」に書いていることは「すべて」資料にわかりやすくまとめ，実験前前日の土曜日の夜までに進捗を「Documents」へアップロードする（間に合わない場合や，分量の少ない場合は日曜日の夜にアップロードしてもよい）．フォーマットは各自に任せる．プレゼンテーションで，全員何を聞かれても答えられる程度の知識は必要だと考えている．

毎回，実験の始まりにドキュメントへの質問，要望，意見，あるいはドキュメント作成者からの質問，要望，意見を言う場を用意する．各自，気になるところがないか，十分に注意しておくこと．

「モジュール作成」では，他の人がまとめた資料を参考にして，関数のモジュールを作成する．この「モジュール作成」がシステム開発における一番の山場だと考えている．お互いの意見交換を大切にしよう．

3．プログラミングについて
ソースコードの書き方を統一したい．
次のソースコードを参考にしてもらいたい．
#include <stdio.h> ←1文字空ける

// 以下のように，関数の説明をする
// main関数
// 引数：なし
// 返り値：0
int main (void) { // ()の前後は空白を空ける {は改行しない
// 1行空ける
	// 変数の説明をする
	int a, b, c; // コンマの次は半角空白を空ける

	// 演算子の前後は半角空白を空ける
	a = 1;
	b = 3;
	c = a + b;

	printf ("%d + %d = %d\n", a, b, c);

	return 0;
}

for文の書き方
for (i = 0; i < 5; i++) {
	printf ("こんな感じで\n");
}
do while文の書き方
do {
	printf ("こんな感じで\n");
	i++;
} while(i < 4);

＜命名規則＞
1．変数名は小文字で，なるべく英語の名前にする．ハイフンを用いてもよい．
2．定数は大文字
3．関数名は何をするかわかる名前にする．小文字で書くことが望ましい．単語ごとにアンダーバー_をつける．
（例）do_disp_window：ウィンドウ表示の関数，packet_capture：パケットキャプチャの関数，等

関数や構造体を別々のファイルに保存したい場合は，別のファイルを同ディレクトリ内に作成する．
コメントは，誰が見てもどんな処理をしているのかわかるように書く．

質問や不明点があればお願いします．
